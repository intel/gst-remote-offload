  SET(USE_GVA 0 )
  SET(USE_GVA_AUDIO 0 )

  IF( DEFINED ENV{GVA_PLUGINS} )
    SET(USE_GVA 1 )
    SET(GVA_LOCATIONENV $ENV{GVA_PLUGINS})
    message("GVA_PLUGINS environment is set. (${GVA_LOCATIONENV})")
  ENDIF( DEFINED ENV{GVA_PLUGINS} )

  IF( DEFINED ENV{GVA_HOME} )
    SET(USE_GVA 1 )
    SET(GVA_LOCATIONENV $ENV{GVA_HOME})
    message("GVA_HOME environment is set. (${GVA_LOCATIONENV})")
  ENDIF( DEFINED ENV{GVA_HOME} )

  # For Yocto BKC recipe build. Only set GVA_LINUX_BUILD if compiling this using Yocto recipe
  IF( DEFINED ENV{GVA_LINUX_BUILD} )
          SET(USE_GVA 1)
          message("GVA linux is set")
  ENDIF (DEFINED ENV{GVA_LINUX_BUILD} )


  IF( ${USE_GVA} )
    SET(GVA_PLUGINS ${GVA_LOCATIONENV} CACHE STRING "Location of top level source tree of Intel Video Analytics Gstreamer Plugins")

    message("Will compile in support to serialize GVA Meta types.")
    message("Assuming release build is located at ${GVA_PLUGINS}/build/intel64/Release/")
    message("Make sure that you add ${GVA_PLUGINS}/build/intel64/Release/lib/ to your GST_PLUGIN_PATH environment variable before running tests.")
    SET(CMAKE_C_FLAGS "-DHAVE_GVA_META_API ${CMAKE_C_FLAGS}")
    IF( DEFINED ENV{GVA_LINUX_BUILD} )
      include_directories($ENV{GVA_INCLUDE_DIR})
      message ($ENV{GVA_LINUX_DIR})
      FIND_LIBRARY(gstvideoanalyticsmeta_LIBRARY NAME gstvideoanalyticsmeta PATHS /usr/lib/gst-video-analytics DOX "GVA Meta")
      find_file(GVA_AUDIO_HEADER gva_audio_event_meta.h $ENV{GVA_INCLUDE_DIR}/../audio/ NO_DEFAULT_PATH )
      if( GVA_AUDIO_HEADER )
         message("gva_audio_event_meta.h found, will support serialization of GstGVAAudioEventMeta")
         set(USE_GVA_AUDIO 1)
         SET(CMAKE_C_FLAGS "-DHAVE_GVA_AUDIO_META_API ${CMAKE_C_FLAGS}")
         include_directories($ENV{GVA_INCLUDE_DIR}/../audio/)
      else()
         message("gva_audio_event_meta.h NOT found, will NOT support serialization of GstGVAAudioEventMeta")
      endif()
      message("GVA built in Linux")
    ELSE (DEFINED ENV{GVA_LINUX_BUILD} )
      #Note: OpenVINO 2020 R1 version (and earlier) of GVA keeps metadata headers at ${GVA_PLUGINS}/gst-libs/gst/videoanalytics/
      #      OpenVINO 2020 R2 version (and later) of GVA keeps metadata headers at ${GVA_PLUGINS}/gst-libs/gst/videoanalytics/metadata
      # So we include them both to make the build work across both of these version.
      # TODO: Remove ${GVA_PLUGINS}/gst-libs/gst/videoanalytics/ here once we've deprecated support for R1 (and earlier) version of GVA.
      include_directories(${GVA_PLUGINS}/gst-libs/gst/videoanalytics/ ${GVA_PLUGINS}/gst-libs/gst/videoanalytics/metadata)
      FIND_LIBRARY(gstvideoanalyticsmeta_LIBRARY NAME gstvideoanalyticsmeta PATHS ${GVA_PLUGINS}/build/intel64/Release/lib DOX "GVA Meta")
    ENDIF (DEFINED ENV{GVA_LINUX_BUILD} )
  ELSE( ${USE_GVA} )
     pkg_check_modules(DL_STREAMER dl-streamer )
     if(DL_STREAMER_FOUND)
         message("DL Streamer found! Will compile in support to serialize DL Streamer-defined Meta types.")
         SET(CMAKE_C_FLAGS "-DHAVE_GVA_META_API ${CMAKE_C_FLAGS}")
         find_file(GVA_AUDIO_HEADER gva_audio_event_meta.h ${DL_STREAMER_INCLUDE_DIRS}/gst/videoanalytics/audio/ NO_DEFAULT_PATH )
         if( GVA_AUDIO_HEADER )
            message("gva_audio_event_meta.h found, will support serialization of GstGVAAudioEventMeta")
            set(USE_GVA_AUDIO 1)
            SET(CMAKE_C_FLAGS "-DHAVE_GVA_AUDIO_META_API ${CMAKE_C_FLAGS}")
            include_directories(${DL_STREAMER_INCLUDE_DIRS}/gst/videoanalytics/audio/)
         else()
            message("gva_audio_event_meta.h NOT found, will NOT support serialization of GstGVAAudioEventMeta")
         endif()
         include_directories(${DL_STREAMER_INCLUDE_DIRS}/gst/videoanalytics/metadata/)
         FIND_LIBRARY(gstvideoanalyticsmeta_LIBRARY NAME gstvideoanalyticsmeta PATHS ${DL_STREAMER_LIBRARY_DIRS}  DOX "GVA Meta")
         SET(USE_GVA 1 )
     else()
		 message("Warning! DL Streamer can not be found!")
		 message("Not compiling in support to serialize GVA-specific Meta types.")
     endif()

  ENDIF( ${USE_GVA} )

